// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package main generated by go-bindata.// sources:
// static/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x72\xdb\xbc\x11\xbd\xf7\x53\xec\xc7\x1b\x4a\xe3\x90\x94\x63\x25\xe3\xd8\xa2\x66\x1a\x3b\x3f\x9e\x26\xb6\x13\x2b\x49\x3b\xd3\x1b\x88\x5c\x92\x88\x41\x80\x05\x96\x92\xd5\x4e\xde\xbd\x03\x92\xa2\x48\x5b\x92\xdd\x36\x33\xdf\x95\x49\x62\xb1\xe7\xec\xd9\xc5\x2e\xe4\xc9\x1f\x17\xd7\xe7\xb3\xbf\xdf\xbc\x83\x8c\x72\x31\x3d\x98\xfc\xe1\x79\x60\xd8\x02\x63\x48\xb4\xca\xa1\xd4\x22\x1c\x8c\x46\xe3\x37\xc3\x8c\xa8\x30\xa7\x41\x60\x54\x42\x4b\xa6\xd1\xcf\xf8\x3d\x47\x3f\xca\x82\x92\xb8\xe0\xc4\xd1\x04\x3f\x4d\xb0\xc4\xb9\x51\xd1\x1d\x52\x00\x9e\x37\x3d\x98\xd4\x6e\x0f\x26\x19\xb2\x78\x7a\x00\x30\xc9\x91\x18\x58\x67\x1e\xfe\xb3\xe4\x8b\xd0\x39\x57\x92\x50\x92\x37\x5b\x15\xe8\x40\x54\xbf\x85\x0e\xe1\x3d\x05\x76\xf7\x19\x44\x19\xd3\x06\x29\xfc\x36\x7b\xef\x9d\x38\x95\x17\xe2\x24\x70\xfa\x03\xe7\xb7\x15\x98\xdd\x66\x94\xc0\x49\x50\x2f\x58\x13\xc1\xe5\x1d\x68\x14\xa1\x63\x68\x25\xd0\x64\x88\xe4\x40\xa6\x31\x09\x9d\x36\x18\x62\xd1\x5d\xc1\x28\xf3\xe7\x4a\x91\x21\xcd\x8a\x28\x96\x7e\xa4\xf2\xa0\xfd\x10\x8c\xfd\xb1\x7f\x14\x44\xc6\x6c\xbe\xf9\x39\x97\x7e\x64\x8c\x03\x5c\x12\xa6\x9a\xd3\x2a\x74\x4c\xc6\x8e\x4f\xc6\xde\xf7\x3b\xa5\x4e\xee\xc7\xe7\x1f\xcc\xf5\xf1\xe1\xc7\xec\x7e\x71\x32\x0b\xbe\xbc\xba\x61\x7f\xa3\xbb\xbf\x52\xf9\xba\x4c\x5f\xcd\xae\xf1\xea\xfb\xeb\xf4\x2d\x7f\x8f\x3f\x6e\x3e\xbc\xbf\x7a\xf3\xb9\xcc\xae\x93\x97\xc7\x5f\xde\x5c\x26\x3f\x33\x07\x22\xad\x8c\x51\x9a\xa7\x5c\x86\x0e\x93\x4a\xae\x72\x55\x9a\x3a\x70\x13\x69\x5e\x90\x7d\x04\x50\x12\xb5\x56\x1a\x42\x48\x4a\x19\x11\x57\x72\x90\x9b\x74\x08\xff\xae\x56\x01\x84\x4a\xab\x0f\x67\xd5\xfb\xaf\x83\xea\xcf\xda\xb4\x5d\x6d\xcd\x63\x15\x95\x39\x4a\xf2\x53\xa4\x77\x02\xed\xe3\xdb\xd5\x65\x3c\x70\x85\x4a\xdd\xa1\xcf\x8a\x02\x65\x7c\x9e\x71\x11\x0f\x5a\xd3\x48\x23\x23\x9c\xe1\x3d\x5d\xa9\x18\x07\x12\x97\x70\xc1\x08\x07\x43\x38\x04\x17\x00\x5c\x38\x84\xdc\xa4\xf6\xed\x1f\xd2\x1d\xee\xa0\x62\x88\x51\x69\xf6\x91\xdf\xc3\xae\xde\xec\x0e\x7d\x5b\x31\x4d\x31\x41\x68\x51\xd7\x60\x00\x93\x60\xa3\x5b\x4f\xc2\x05\xd3\x50\xd7\xeb\xd9\x03\x4e\x91\x92\x12\x23\x1a\x6c\x18\x59\xdb\x52\x0b\x08\x77\x73\x29\xb5\x70\x87\xfe\x82\x89\x12\xcf\x3a\xbb\x0a\xad\x48\x45\x6a\xef\xd6\xb5\xcd\xc3\xfd\x3c\x81\xc1\x66\x7f\x08\xae\x3b\x6c\x56\xa0\x61\x0e\x21\x58\xdd\xdb\xc3\x30\x28\xb5\x68\x65\x43\x61\xf0\x19\xf6\x2f\x5a\x8e\xed\xce\x26\x29\xee\x79\x2d\x04\x97\x29\x90\x02\xc7\x66\xd4\xaa\x70\x08\xae\x03\x4b\x4e\xd9\x26\xba\x6a\xad\x7d\xb3\x06\xbe\xef\xbb\x1b\x87\x15\x9a\xaf\xa4\x2a\x50\x76\x8b\x16\x17\x28\x69\xa3\xf3\x23\x68\x8c\x5b\xe4\xc6\xc7\x9a\x40\xc7\xfb\xaf\x47\x30\x39\x1a\xc3\x52\xdc\x8b\x64\xab\xcc\xfd\x7a\xfe\xfd\xe2\xb4\x2a\xd5\x6a\xdd\x8f\x19\xb1\x3d\x7e\x23\xa1\xcc\x7e\xaf\x6b\xfe\x17\xdc\x44\xeb\x10\x1e\x53\x7d\x78\x0a\xe2\xd6\xba\x53\x74\x36\xfd\x35\xf2\x7e\x00\x2e\xd3\x0e\x42\xcb\xb6\xe2\x3a\xd8\x20\x57\xf5\xf0\x30\xfe\x2b\x45\xb0\x95\xe7\xf6\xc3\x8a\x32\x7e\x9a\x60\x0d\x5f\xd9\xee\x2c\x79\x7b\x60\xd7\xe5\xde\xa1\x5e\x71\xba\x7d\x77\x35\xab\x73\xf2\xdf\x6d\xff\x5d\x11\x1e\x8d\x46\x4f\x06\x99\x28\x0d\x03\x7b\xbe\x39\x84\x30\x3a\x03\x0e\x13\x38\x1a\x55\x0f\x87\x21\x1c\x75\x4d\xfb\x8a\xb8\x84\x86\x6c\x6c\xbc\x13\x76\x2f\xf0\x6d\x06\xbf\x7e\x63\x88\x65\x11\xd7\x6d\x7a\x7f\x84\x3b\xb5\xd7\xc8\xe2\xd5\x2d\x31\xc2\x47\x8d\xb7\x09\x74\x63\x71\xf6\xb4\xbb\x79\x99\x24\xa8\x31\xfe\x4b\xae\x4a\x49\xbb\x5c\xf6\xad\x76\x66\xfc\x7f\x21\xed\x7a\xee\xff\x4f\xb3\xe3\x64\xbb\xea\x91\x40\xa6\x3f\xa9\xd4\x74\x84\x6f\x6e\x2e\x7e\x95\xc4\x73\x6b\x60\x3b\xad\xe0\x4a\xa6\xc6\x7d\x7a\xfa\xd5\xb3\x99\x4b\x89\xfa\xe3\xec\xf3\x27\xcb\xc2\xed\xb5\x17\x83\x74\x29\x09\xf5\x82\x89\x41\x9d\xf5\x17\x70\x34\xaa\x1c\x6f\xa6\xe2\x24\xa8\xef\x67\x07\x93\xb9\x8a\x57\xd5\x94\x8c\xf9\x02\x22\xc1\x8c\x09\x1d\x7b\x27\x63\x5c\xa2\xf6\x12\x51\xf2\x18\xf2\x95\x77\xec\xd4\xf3\xb3\x67\xc6\x74\xdc\x7c\x7e\xbc\xe0\x59\x00\xd4\x10\x7b\x89\xc0\x7b\x7b\x74\x72\x8f\x4b\xc1\x25\xb6\x5b\xfa\x9b\xb8\x2c\x4a\xf2\x52\xad\xca\x02\x72\xed\xbd\xec\x98\xed\x34\xf4\x0a\x8d\xf6\x92\xd2\xb3\xb5\x13\xbf\x60\x72\x9b\xb9\x4d\x9f\xd3\xb9\x45\x7e\xfb\xfa\xe9\x74\x12\x58\xeb\x1e\x58\x10\xf3\x45\xef\x43\xe5\x63\xed\xb0\x0a\xc5\x4a\xa4\x95\x70\x80\xc7\xa1\x53\x6a\xe1\x00\xad\x0a\x6c\x1e\x0d\xff\x17\x86\xce\xc9\xc8\x81\xaa\x57\x85\xce\xd2\xde\x3d\x85\x8a\x98\xc8\x94\xa1\xd3\xa3\x93\x93\xf1\x38\x58\x9a\xae\x12\x7d\xcc\x3f\x47\x98\x9b\x66\x94\xff\x0e\x4d\xd6\xd7\x82\xb5\x30\x15\x42\xa3\xcc\xd1\x46\x19\x67\x3a\x09\x04\x9b\xa3\x78\x96\x14\x73\x92\x8d\x10\x89\x50\x8c\x3c\xcd\xd3\x8c\x9c\xdd\xb4\xe6\x24\xc1\xee\x29\x34\xcf\x99\x5e\xad\xb9\xcc\x4b\x22\x25\x5b\x0e\xcd\xad\xc3\x01\x3b\xea\x79\x74\x57\x1d\x80\x7a\x2c\x3f\xc3\x77\xcc\x64\x8a\x7a\x87\xeb\xcd\xbc\xee\x78\xef\xce\xfd\x67\x00\x2c\x99\x96\xb6\x45\x40\xec\x49\x25\x71\x07\xd2\x6d\xc1\x72\x3b\x8c\xa0\x60\xb6\xb4\x4d\x07\xaf\x1d\x6f\xcf\x00\x33\x65\x14\xa1\xfd\x9d\xb3\x5d\x29\xdb\xae\xc0\x36\xb4\xae\x58\x9b\x26\xb7\xab\xa0\xfb\x2f\x0f\x3b\x85\x6d\x41\x3b\x9a\x42\xdd\x3d\xfa\xbc\x8b\xf5\xa2\x2d\xa9\x46\x7e\x58\x7a\xaf\x46\xce\xf4\xb6\xba\x26\x9d\x36\x75\x6e\xcb\x70\x33\x02\x9c\xa9\xd7\x94\x75\x67\xb9\xbe\x57\x39\xd3\xcb\xd8\xfe\x96\xac\x56\x27\x41\xf1\x5c\xb8\xb7\xd5\x78\xe8\xc2\xf5\x07\x46\x07\x72\xbe\x22\x34\x3d\xd7\x0f\xcb\xdc\xba\x67\x1a\xd9\xb6\x23\xd5\xa6\xde\x62\xd4\x27\xa9\x7b\xaa\xb4\x5a\x9a\xd0\x19\xdb\x1f\xd3\xc2\x54\x8d\x67\x3a\x09\xd6\xfe\x3a\x10\x5b\x33\xce\x65\xa2\xba\xc7\xe9\xa9\x3a\xb3\x5d\xa5\x5f\x5b\x9d\xbc\xef\x4f\x74\xa2\x14\xa1\xee\xa6\xba\xd0\x58\xc5\x24\x54\x6a\x39\x17\x1a\x1f\x78\x3a\xe8\x79\x6d\x1e\x26\x41\x3d\xb5\xec\x18\xab\xfe\xdd\xf0\x9f\x00\x00\x00\xff\xff\xe4\x18\xe8\xc1\xd6\x10\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 4310, mode: os.FileMode(420), modTime: time.Unix(1584065293, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
